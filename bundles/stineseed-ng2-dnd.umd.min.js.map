{"version":3,"sources":["ng://@stineseed/ng2-dnd/src/dnd.utils.ts","ng://@stineseed/ng2-dnd/src/dnd.config.ts","ng://@stineseed/ng2-dnd/src/dnd.service.ts","node_modules/tslib/tslib.es6.js","ng://@stineseed/ng2-dnd/src/abstract.component.ts","ng://@stineseed/ng2-dnd/src/draggable.component.ts","ng://@stineseed/ng2-dnd/src/droppable.component.ts","ng://@stineseed/ng2-dnd/src/sortable.component.ts","ng://@stineseed/ng2-dnd/src/dnd.module.ts"],"names":["isString","obj","isPresent","undefined","DataTransferEffect","name","this","DragImage","imageElement","x_offset","y_offset","imgScr","HTMLImageElement","src","DragDropConfig","MOVE","DragDropData","dragDropServiceFactory","DragDropService","Injectable","dragDropSortableServiceFactory","config","DragDropSortableService","_config","prototype","_elem","markSortable","elem","classList","remove","onSortableDragClass","add","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","AbstractComponent","elemRef","_dragDropService","_cdr","_this","_defaultCursor","defaultCursor","nativeElement","style","cursor","ondragenter","event","_onDragEnter","ondragover","_onDragOver","dataTransfer","dropEffect","ondragleave","_onDragLeave","ondrop","_onDrop","onmousedown","_target","target","ondragstart","_dragHandle","contains","_onDragStart","setData","effectAllowed","dragEffect","dragImage","setDragImage","createImage","img","isFunction","callFun","fun","cloneItem","_dragHelper","cloneNode","position","top","left","parentElement","appendChild","offsetX","offsetY","cursorelem","_dragEnabled","effectCursor","dragCursor","preventDefault","ondragend","removeChild","_onDragEnd","defineProperty","enabled","draggable","setDragHandle","detectChanges","setTimeout","destroyed","_isDropAllowed","_onDragEnterCallback","_onDragOverCallback","_onDragLeaveCallback","_preventAndStop","_onDropCallback","isDragged","files","dropEnabled","allowDrop","dragData","dropZones","length","allowedDropZones","i","dragZone","indexOf","stopPropagation","_onDragStartCallback","_onDragEndCallback","ElementRef","ChangeDetectorRef","AbstractHandleComponent","_Component","DraggableComponent","dragDropService","cdr","_super","call","EventEmitter","dragEnabled","tslib_1.__extends","value","onDragSuccessCallback","onDragStartClass","onDragStart","emit","mouseEvent","onDragEnd","Directive","args","selector","Input","Output","DraggableHandleComponent","DroppableComponent","onDragEnterClass","onDragEnter","onDragOverClass","onDragOver","onDragLeave","onDropSuccess","SortableContainer","_sortableDataService","_sortableData","sortableData","FormArray","sortableHandler","SortableFormArrayHandler","SortableArrayHandler","item","sortableContainer","getItemAt","index","removeItemAt","insertItemAt","splice","at","controls","removeAt","insert","SortableComponent","_sortableContainer","onDragStartCallback","onDragOverCallback","onDragEndCallback","onDropSuccessCallback","SortableHandleComponent","providers","provide","useFactory","deps","DndModule","forRoot","ngModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["// Copyright (C) 2016-2018 Sergey Akopkokhyants\r\n// This project is licensed under the terms of the MIT license.\r\n// https://github.com/akserg/ng2-dnd\r\n\r\n/**\r\n * Check and return true if an object is type of string\r\n */\r\nexport function isString(obj:any) {\r\n    return typeof obj === \"string\";\r\n}\r\n\r\n/**\r\n * Check and return true if an object not undefined or null\r\n */\r\nexport function isPresent(obj: any) {\r\n    return obj !== undefined && obj !== null;\r\n}\r\n\r\n/**\r\n * Check and return true if an object is type of Function\r\n */\r\nexport function isFunction(obj: any) {\r\n    return typeof obj === \"function\";\r\n}\r\n\r\n/**\r\n * Create Image element with specified url string\r\n */\r\nexport function createImage(src: string) {\r\n    let img:HTMLImageElement = new HTMLImageElement();\r\n    img.src = src;\r\n    return img;\r\n}\r\n\r\n/**\r\n * Call the function\r\n */\r\nexport function callFun(fun: Function) {\r\n    return fun();\r\n}","// Copyright (C) 2016-2018 Sergey Akopkokhyants\r\n// This project is licensed under the terms of the MIT license.\r\n// https://github.com/akserg/ng2-dnd\r\n\r\nimport {isString} from './dnd.utils';\r\n\r\nexport class DataTransferEffect {\r\n\r\n    static COPY = new DataTransferEffect('copy');\r\n    static LINK = new DataTransferEffect('link');\r\n    static MOVE = new DataTransferEffect('move');\r\n    static NONE = new DataTransferEffect('none');\r\n\r\n    constructor(public name: string) { }\r\n}\r\n\r\nexport class DragImage {\r\n    constructor(\r\n        public imageElement: any,\r\n        public x_offset: number = 0,\r\n        public y_offset: number = 0) {\r\n            if (isString(this.imageElement)) {\r\n                // Create real image from string source\r\n                let imgScr: string = <string>this.imageElement;\r\n                this.imageElement = new HTMLImageElement();\r\n                (<HTMLImageElement>this.imageElement).src = imgScr;\r\n            }\r\n        }\r\n}\r\n\r\nexport class DragDropConfig {\r\n    public onDragStartClass: string = \"dnd-drag-start\";\r\n    public onDragEnterClass: string = \"dnd-drag-enter\";\r\n    public onDragOverClass: string = \"dnd-drag-over\";\r\n    public onSortableDragClass: string = \"dnd-sortable-drag\";\r\n\r\n    public dragEffect: DataTransferEffect = DataTransferEffect.MOVE;\r\n    public dropEffect: DataTransferEffect = DataTransferEffect.MOVE;\r\n    public dragCursor: string = \"move\";\r\n    public dragImage: DragImage;\r\n    public defaultCursor: string = \"pointer\";\r\n}","// Copyright (C) 2016-2018 Sergey Akopkokhyants\r\n// This project is licensed under the terms of the MIT license.\r\n// https://github.com/akserg/ng2-dnd\r\n\r\nimport {Injectable, EventEmitter} from '@angular/core';\r\n\r\nimport {DragDropConfig} from './dnd.config';\r\nimport {isPresent} from './dnd.utils';\r\nimport {SortableContainer} from './sortable.component';\r\n\r\nexport class DragDropData {\r\n    dragData: any;\r\n    mouseEvent: MouseEvent;\r\n}\r\n\r\nexport function dragDropServiceFactory(): DragDropService  {\r\n    return new DragDropService();\r\n}\r\n\r\n@Injectable()\r\nexport class DragDropService {\r\n    allowedDropZones: Array<string> = [];\r\n    onDragSuccessCallback: EventEmitter<DragDropData>;\r\n    dragData: any;\r\n    isDragged: boolean;\r\n}\r\n\r\nexport function dragDropSortableServiceFactory(config: DragDropConfig): DragDropSortableService  {\r\n    return new DragDropSortableService(config);\r\n}\r\n\r\n@Injectable()\r\nexport class DragDropSortableService {\r\n    index: number;\r\n    sortableContainer: SortableContainer;\r\n    isDragged: boolean;\r\n\r\n    private _elem: HTMLElement;\r\n    public get elem(): HTMLElement {\r\n        return this._elem;\r\n    }\r\n\r\n    constructor(private _config:DragDropConfig) {}\r\n\r\n    markSortable(elem: HTMLElement) {\r\n        if (isPresent(this._elem)) {\r\n            this._elem.classList.remove(this._config.onSortableDragClass);\r\n        }\r\n        if (isPresent(elem)) {\r\n            this._elem = elem;\r\n            this._elem.classList.add(this._config.onSortableDragClass);\r\n        }\r\n    }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\r\n// This project is licensed under the terms of the MIT license.\r\n// https://github.com/akserg/ng2-dnd\r\n\r\nimport {Injectable, ChangeDetectorRef, ViewRef} from '@angular/core';\r\nimport {ElementRef} from '@angular/core';\r\n\r\nimport { DragDropConfig, DragImage } from './dnd.config';\r\nimport { DragDropService } from './dnd.service';\r\nimport { isString, isFunction, isPresent, createImage, callFun } from './dnd.utils';\r\n\r\n@Injectable()\r\nexport abstract class AbstractComponent {\r\n    _elem: HTMLElement;\r\n    _dragHandle: HTMLElement;\r\n    _dragHelper: HTMLElement;\r\n    _defaultCursor: string;\r\n\r\n    /**\r\n     * Last element that was mousedown'ed\r\n     */\r\n    _target: EventTarget;\r\n\r\n    /**\r\n     * Whether the object is draggable. Default is true.\r\n     */\r\n    private _dragEnabled: boolean = false;\r\n    set dragEnabled(enabled: boolean) {\r\n        this._dragEnabled = !!enabled;\r\n        this._elem.draggable = this._dragEnabled;\r\n    }\r\n    get dragEnabled(): boolean {\r\n        return this._dragEnabled;\r\n    }\r\n\r\n    /**\r\n     * Allows drop on this element\r\n     */\r\n    dropEnabled: boolean = false;\r\n    /**\r\n     * Drag effect\r\n     */\r\n    effectAllowed: string;\r\n    /**\r\n     * Drag cursor\r\n     */\r\n    effectCursor: string;\r\n\r\n    /**\r\n     * Restrict places where a draggable element can be dropped. Either one of\r\n     * these two mechanisms can be used:\r\n     *\r\n     * - dropZones: an array of strings that permits to specify the drop zones\r\n     *   associated with this component. By default, if the drop-zones attribute\r\n     *   is not specified, the droppable component accepts drop operations by\r\n     *   all the draggable components that do not specify the allowed-drop-zones\r\n     *\r\n     * - allowDrop: a boolean function for droppable components, that is checked\r\n     *   when an item is dragged. The function is passed the dragData of this\r\n     *   item.\r\n     *   - if it returns true, the item can be dropped in this component\r\n     *   - if it returns false, the item cannot be dropped here\r\n     */\r\n    allowDrop: (dropData: any) => boolean;\r\n    dropZones: string[] = [];\r\n\r\n    /**\r\n     * Here is the property dragImage you can use:\r\n     * - The string value as url to the image\r\n     *   <div class=\"panel panel-default\"\r\n     *        dnd-draggable [dragEnabled]=\"true\"\r\n     *        [dragImage]=\"/images/simpler.png\">\r\n     * ...\r\n     * - The DragImage value with Image and optional offset by x and y:\r\n     *   let myDragImage: DragImage = new DragImage(\"/images/simpler1.png\", 0, 0);\r\n     * ...\r\n     *   <div class=\"panel panel-default\"\r\n     *        dnd-draggable [dragEnabled]=\"true\"\r\n     *        [dragImage]=\"myDragImage\">\r\n     * ...\r\n     * - The custom function to return the value of dragImage programmatically:\r\n     *   <div class=\"panel panel-default\"\r\n     *        dnd-draggable [dragEnabled]=\"true\"\r\n     *        [dragImage]=\"getDragImage(someData)\">\r\n     * ...\r\n     *   getDragImage(value:any): string {\r\n     *     return value ? \"/images/simpler1.png\" : \"/images/simpler2.png\"\r\n     *   }\r\n     */\r\n    dragImage: string | DragImage | Function;\r\n\r\n    cloneItem: boolean = false;\r\n\r\n    constructor(elemRef: ElementRef, public _dragDropService: DragDropService, public _config: DragDropConfig,\r\n        private _cdr: ChangeDetectorRef) {\r\n\r\n        // Assign default cursor unless overridden\r\n        this._defaultCursor = _config.defaultCursor;\r\n        this._elem = elemRef.nativeElement;\r\n        this._elem.style.cursor = this._defaultCursor;  // set default cursor on our element\r\n        //\r\n        // DROP events\r\n        //\r\n        this._elem.ondragenter = (event: Event) => {\r\n            this._onDragEnter(event);\r\n        };\r\n        this._elem.ondragover = (event: DragEvent) => {\r\n            this._onDragOver(event);\r\n            //\r\n            if (event.dataTransfer != null) {\r\n                event.dataTransfer.dropEffect = this._config.dropEffect.name;\r\n            }\r\n\r\n            return false;\r\n        };\r\n        this._elem.ondragleave = (event: Event) => {\r\n            this._onDragLeave(event);\r\n        };\r\n        this._elem.ondrop = (event: Event) => {\r\n            this._onDrop(event);\r\n        };\r\n        //\r\n        // Drag events\r\n        //\r\n        this._elem.onmousedown = (event: MouseEvent) => {\r\n            this._target = event.target;\r\n        };\r\n        this._elem.ondragstart = (event: DragEvent) => {\r\n            if (this._dragHandle) {\r\n                if (!this._dragHandle.contains(<Element>this._target)) {\r\n                    event.preventDefault();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this._onDragStart(event);\r\n            //\r\n            if (event.dataTransfer != null) {\r\n                event.dataTransfer.setData('text', '');\r\n                // Change drag effect\r\n                event.dataTransfer.effectAllowed = this.effectAllowed || this._config.dragEffect.name;\r\n                // Change drag image\r\n                if (isPresent(this.dragImage)) {\r\n                    if (isString(this.dragImage)) {\r\n                        (<any>event.dataTransfer).setDragImage(createImage(<string>this.dragImage));\r\n                    } else if (isFunction(this.dragImage)) {\r\n                        (<any>event.dataTransfer).setDragImage(callFun(<Function>this.dragImage));\r\n                    } else {\r\n                        let img: DragImage = <DragImage>this.dragImage;\r\n                        (<any>event.dataTransfer).setDragImage(img.imageElement, img.x_offset, img.y_offset);\r\n                    }\r\n                } else if (isPresent(this._config.dragImage)) {\r\n                    let dragImage: DragImage = this._config.dragImage;\r\n                    (<any>event.dataTransfer).setDragImage(dragImage.imageElement, dragImage.x_offset, dragImage.y_offset);\r\n                } else if (this.cloneItem) {\r\n                    this._dragHelper = <HTMLElement>this._elem.cloneNode(true);\r\n                    this._dragHelper.classList.add('dnd-drag-item');\r\n                    this._dragHelper.style.position = \"absolute\";\r\n                    this._dragHelper.style.top = \"0px\";\r\n                    this._dragHelper.style.left = \"-1000px\";\r\n                    this._elem.parentElement.appendChild(this._dragHelper);\r\n                    (<any>event.dataTransfer).setDragImage(this._dragHelper, event.offsetX, event.offsetY);\r\n                }\r\n\r\n                // Change drag cursor\r\n                let cursorelem = (this._dragHandle) ? this._dragHandle : this._elem;\r\n\r\n                if (this._dragEnabled) {\r\n                    cursorelem.style.cursor = this.effectCursor ? this.effectCursor : this._config.dragCursor;\r\n                } else {\r\n                    cursorelem.style.cursor = this._defaultCursor;\r\n                }\r\n            }\r\n        };\r\n\r\n        this._elem.ondragend = (event: Event) => {\r\n            if (this._elem.parentElement && this._dragHelper) {\r\n                this._elem.parentElement.removeChild(this._dragHelper);\r\n            }\r\n            // console.log('ondragend', event.target);\r\n            this._onDragEnd(event);\r\n            // Restore style of dragged element\r\n            let cursorelem = (this._dragHandle) ? this._dragHandle : this._elem;\r\n            cursorelem.style.cursor = this._defaultCursor;\r\n        };\r\n    }\r\n\r\n    public setDragHandle(elem: HTMLElement) {\r\n        this._dragHandle = elem;\r\n    }\r\n    /******* Change detection ******/\r\n\r\n    detectChanges () {\r\n        // Programmatically run change detection to fix issue in Safari\r\n        setTimeout(() => {\r\n            if ( this._cdr && !(this._cdr as ViewRef).destroyed ) {\r\n                this._cdr.detectChanges();\r\n            }\r\n        }, 250);\r\n    }\r\n\r\n    //****** Droppable *******//\r\n    private _onDragEnter(event: Event): void {\r\n        // console.log('ondragenter._isDropAllowed', this._isDropAllowed);\r\n        if (this._isDropAllowed(event)) {\r\n            // event.preventDefault();\r\n            this._onDragEnterCallback(event);\r\n        }\r\n    }\r\n\r\n    private _onDragOver(event: Event) {\r\n        // // console.log('ondragover._isDropAllowed', this._isDropAllowed);\r\n        if (this._isDropAllowed(event)) {\r\n            // The element is over the same source element - do nothing\r\n            if (event.preventDefault) {\r\n                // Necessary. Allows us to drop.\r\n                event.preventDefault();\r\n            }\r\n\r\n            this._onDragOverCallback(event);\r\n        }\r\n    }\r\n\r\n    private _onDragLeave(event: Event): void {\r\n        // console.log('ondragleave._isDropAllowed', this._isDropAllowed);\r\n        if (this._isDropAllowed(event)) {\r\n            // event.preventDefault();\r\n            this._onDragLeaveCallback(event);\r\n        }\r\n    }\r\n\r\n    private _onDrop(event: Event): void {\r\n        // console.log('ondrop._isDropAllowed', this._isDropAllowed);\r\n        if (this._isDropAllowed(event)) {\r\n            // Necessary. Allows us to drop.\r\n            this._preventAndStop(event);\r\n\r\n            this._onDropCallback(event);\r\n\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    private _isDropAllowed(event: any): boolean {\r\n        if ((this._dragDropService.isDragged || (event.dataTransfer && event.dataTransfer.files)) && this.dropEnabled) {\r\n            // First, if `allowDrop` is set, call it to determine whether the\r\n            // dragged element can be dropped here.\r\n            if (this.allowDrop) {\r\n                return this.allowDrop(this._dragDropService.dragData);\r\n            }\r\n\r\n            // Otherwise, use dropZones if they are set.\r\n            if (this.dropZones.length === 0 && this._dragDropService.allowedDropZones.length === 0) {\r\n                return true;\r\n            }\r\n            for (let i: number = 0; i < this._dragDropService.allowedDropZones.length; i++) {\r\n                let dragZone: string = this._dragDropService.allowedDropZones[i];\r\n                if (this.dropZones.indexOf(dragZone) !== -1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private _preventAndStop(event: Event): any {\r\n        if (event.preventDefault) {\r\n            event.preventDefault();\r\n        }\r\n        if (event.stopPropagation) {\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    //*********** Draggable **********//\r\n\r\n    private _onDragStart(event: Event): void {\r\n        //console.log('ondragstart.dragEnabled', this._dragEnabled);\r\n        if (this._dragEnabled) {\r\n            this._dragDropService.allowedDropZones = this.dropZones;\r\n            // console.log('ondragstart.allowedDropZones', this._dragDropService.allowedDropZones);\r\n            this._onDragStartCallback(event);\r\n        }\r\n    }\r\n\r\n    private _onDragEnd(event: Event): void {\r\n        this._dragDropService.allowedDropZones = [];\r\n        // console.log('ondragend.allowedDropZones', this._dragDropService.allowedDropZones);\r\n        this._onDragEndCallback(event);\r\n    }\r\n\r\n    //**** Drop Callbacks ****//\r\n    _onDragEnterCallback(event: Event) { }\r\n    _onDragOverCallback(event: Event) { }\r\n    _onDragLeaveCallback(event: Event) { }\r\n    _onDropCallback(event: Event) { }\r\n\r\n    //**** Drag Callbacks ****//\r\n    _onDragStartCallback(event: Event) { }\r\n    _onDragEndCallback(event: Event) { }\r\n}\r\n\r\nexport class AbstractHandleComponent {\r\n    _elem: HTMLElement;\r\n    constructor(elemRef: ElementRef, public _dragDropService: DragDropService, public _config: DragDropConfig,\r\n        private _Component: AbstractComponent, private _cdr: ChangeDetectorRef) {\r\n        this._elem = elemRef.nativeElement;\r\n        this._Component.setDragHandle(this._elem);\r\n    }\r\n}\r\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\r\n// This project is licensed under the terms of the MIT license.\r\n// https://github.com/akserg/ng2-dnd\r\n\r\nimport {ChangeDetectorRef} from '@angular/core';\r\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\r\n\r\nimport {AbstractComponent, AbstractHandleComponent} from './abstract.component';\r\nimport {DragDropConfig, DragImage} from './dnd.config';\r\nimport {DragDropService, DragDropData} from './dnd.service';\r\n\r\n@Directive({ selector: '[dnd-draggable]' })\r\nexport class DraggableComponent extends AbstractComponent {\r\n\r\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\r\n        this.dragEnabled = !!value;\r\n    }\r\n\r\n    /**\r\n     * Callback function called when the drag actions happened.\r\n     */\r\n    @Output() onDragStart: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\r\n    @Output() onDragEnd: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\r\n\r\n    /**\r\n     * The data that has to be dragged. It can be any JS object\r\n     */\r\n    @Input() dragData: any;\r\n\r\n    /**\r\n     * Callback function called when the drag action ends with a valid drop action.\r\n     * It is activated after the on-drop-success callback\r\n     */\r\n    @Output(\"onDragSuccess\") onDragSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\r\n        this.dropZones = value;\r\n    }\r\n\r\n    /**\r\n     * Drag allowed effect\r\n     */\r\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\r\n        this.effectAllowed = value;\r\n    }\r\n\r\n    /**\r\n     * Drag effect cursor\r\n     */\r\n    @Input(\"effectCursor\") set effectcursor(value: string) {\r\n        this.effectCursor = value;\r\n    }\r\n\r\n    /**\r\n     * Here is the property dragImage you can use:\r\n     * - The string value as url to the image\r\n     *   <div class=\"panel panel-default\"\r\n     *        dnd-draggable [dragEnabled]=\"true\"\r\n     *        [dragImage]=\"/images/simpler.png\">\r\n     * ...\r\n     * - The DragImage value with Image and offset by x and y:\r\n     *   let myDragImage: DragImage = new DragImage(\"/images/simpler1.png\", 0, 0);\r\n     * ...\r\n     *   <div class=\"panel panel-default\"\r\n     *        dnd-draggable [dragEnabled]=\"true\"\r\n     *        [dragImage]=\"myDragImage\">\r\n     * ...\r\n     * - The custom function to return the value of dragImage programmatically:\r\n     *   <div class=\"panel panel-default\"\r\n     *        dnd-draggable [dragEnabled]=\"true\"\r\n     *        [dragImage]=\"getDragImage(someData)\">\r\n     * ...\r\n     *   getDragImage(value:any): string {\r\n     *     return value ? \"/images/simpler1.png\" : \"/images/simpler2.png\"\r\n     *   }\r\n     */\r\n    @Input() dragImage: string | DragImage | Function;\r\n\r\n    \r\n    @Input() cloneItem: boolean;\r\n\r\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\r\n        cdr:ChangeDetectorRef) {\r\n\r\n        super(elemRef, dragDropService, config, cdr);\r\n        this._defaultCursor = this._elem.style.cursor;\r\n        this.dragEnabled = true;\r\n    }\r\n\r\n    _onDragStartCallback(event: MouseEvent) {\r\n        this._dragDropService.isDragged = true;\r\n        this._dragDropService.dragData = this.dragData;\r\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\r\n        this._elem.classList.add(this._config.onDragStartClass);\r\n        //\r\n        this.onDragStart.emit({dragData: this.dragData, mouseEvent: event});\r\n    }\r\n\r\n    _onDragEndCallback(event: MouseEvent) {\r\n        this._dragDropService.isDragged = false;\r\n        this._dragDropService.dragData = null;\r\n        this._dragDropService.onDragSuccessCallback = null;\r\n        this._elem.classList.remove(this._config.onDragStartClass);\r\n        //\r\n        this.onDragEnd.emit({dragData: this.dragData, mouseEvent: event});\r\n    }\r\n}\r\n\r\n\r\n@Directive({ selector: '[dnd-draggable-handle]' })\r\nexport class DraggableHandleComponent extends AbstractHandleComponent {\r\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, _Component: DraggableComponent,\r\n        cdr:ChangeDetectorRef) {\r\n\r\n        super(elemRef, dragDropService, config, _Component, cdr);\r\n    }\r\n}\r\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\r\n// This project is licensed under the terms of the MIT license.\r\n// https://github.com/akserg/ng2-dnd\r\n\r\nimport {ChangeDetectorRef} from '@angular/core';\r\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\r\n\r\nimport {AbstractComponent} from './abstract.component';\r\nimport {DragDropConfig} from './dnd.config';\r\nimport {DragDropService, DragDropData} from './dnd.service';\r\n\r\n@Directive({ selector: '[dnd-droppable]' })\r\nexport class DroppableComponent extends AbstractComponent {\r\n\r\n    @Input(\"dropEnabled\") set droppable(value:boolean) {\r\n        this.dropEnabled = !!value;\r\n    }\r\n\r\n    /**\r\n     * Callback function called when the drop action completes correctly.\r\n     * It is activated before the on-drag-success callback.\r\n     */\r\n    @Output() onDropSuccess: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\r\n    @Output() onDragEnter: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\r\n    @Output() onDragOver: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\r\n    @Output() onDragLeave: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\r\n\r\n    @Input(\"allowDrop\") set allowdrop(value: (dropData: any) => boolean) {\r\n        this.allowDrop = value;\r\n    }\r\n\r\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\r\n        this.dropZones = value;\r\n    }\r\n\r\n    /**\r\n     * Drag allowed effect\r\n     */\r\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\r\n        this.effectAllowed = value;\r\n    }\r\n\r\n    /**\r\n     * Drag effect cursor\r\n     */\r\n    @Input(\"effectCursor\") set effectcursor(value: string) {\r\n        this.effectCursor = value;\r\n    }\r\n\r\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\r\n        cdr:ChangeDetectorRef) {\r\n\r\n        super(elemRef, dragDropService, config, cdr);\r\n\r\n        this.dropEnabled = true;\r\n    }\r\n\r\n    _onDragEnterCallback(event: MouseEvent) {\r\n        if (this._dragDropService.isDragged) {\r\n            this._elem.classList.add(this._config.onDragEnterClass);\r\n            this.onDragEnter.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\r\n        }\r\n    }\r\n\r\n    _onDragOverCallback (event: MouseEvent) {\r\n        if (this._dragDropService.isDragged) {\r\n            this._elem.classList.add(this._config.onDragOverClass);\r\n            this.onDragOver.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\r\n        }\r\n    };\r\n\r\n    _onDragLeaveCallback (event: MouseEvent) {\r\n        if (this._dragDropService.isDragged) {\r\n            this._elem.classList.remove(this._config.onDragOverClass);\r\n            this._elem.classList.remove(this._config.onDragEnterClass);\r\n            this.onDragLeave.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\r\n        }\r\n    };\r\n\r\n    _onDropCallback (event: MouseEvent) {\r\n        let dataTransfer = (event as any).dataTransfer;\r\n        if (this._dragDropService.isDragged || (dataTransfer && dataTransfer.files)) {\r\n            this.onDropSuccess.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\r\n            if (this._dragDropService.onDragSuccessCallback) {\r\n                this._dragDropService.onDragSuccessCallback.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\r\n            }\r\n            this._elem.classList.remove(this._config.onDragOverClass);\r\n            this._elem.classList.remove(this._config.onDragEnterClass);\r\n        }\r\n    }\r\n}\r\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\r\n// This project is licensed under the terms of the MIT license.\r\n// https://github.com/akserg/ng2-dnd\r\n\r\nimport {ChangeDetectorRef} from '@angular/core';\r\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\r\nimport {FormArray} from '@angular/forms';\r\n\r\nimport {AbstractComponent, AbstractHandleComponent} from './abstract.component';\r\nimport {DragDropConfig} from './dnd.config';\r\nimport {DragDropService, DragDropSortableService} from './dnd.service';\r\n\r\n@Directive({ selector: '[dnd-sortable-container]' })\r\nexport class SortableContainer extends AbstractComponent {\r\n\r\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\r\n        this.dragEnabled = !!value;\r\n    }\r\n\r\n    private _sortableData: Array<any>|FormArray = [];\r\n    private sortableHandler: SortableFormArrayHandler|SortableArrayHandler;\r\n\r\n    @Input() set sortableData(sortableData: Array<any>|FormArray) {\r\n        this._sortableData = sortableData;\r\n        if (sortableData instanceof FormArray) {\r\n            this.sortableHandler = new SortableFormArrayHandler();\r\n        } else {\r\n            this.sortableHandler = new SortableArrayHandler();\r\n        }\r\n        //\r\n        this.dropEnabled = !!this._sortableData;\r\n        // console.log(\"collection is changed, drop enabled: \" + this.dropEnabled);\r\n    }\r\n    get sortableData(): Array<any>|FormArray {\r\n        return this._sortableData;\r\n    }\r\n\r\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\r\n        this.dropZones = value;\r\n    }\r\n\r\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, cdr:ChangeDetectorRef,\r\n        private _sortableDataService: DragDropSortableService) {\r\n\r\n        super(elemRef, dragDropService, config, cdr);\r\n        this.dragEnabled = false;\r\n    }\r\n\r\n    _onDragEnterCallback(event: Event) {\r\n        if (this._sortableDataService.isDragged) {\r\n            let item:any = this._sortableDataService.sortableContainer.getItemAt(this._sortableDataService.index);\r\n            // Check does element exist in sortableData of this Container\r\n            if (this.indexOf(item) === -1) {\r\n                // Let's add it\r\n                // console.log('Container._onDragEnterCallback. drag node [' + this._sortableDataService.index.toString() + '] over parent node');\r\n                // Remove item from previouse list\r\n                this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\r\n                if (this._sortableDataService.sortableContainer._sortableData.length === 0) {\r\n                    this._sortableDataService.sortableContainer.dropEnabled = true;\r\n                }\r\n                // Add item to new list\r\n                this.insertItemAt(item, 0);\r\n                this._sortableDataService.sortableContainer = this;\r\n                this._sortableDataService.index = 0;\r\n            }\r\n            // Refresh changes in properties of container component\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    getItemAt(index: number): any {\r\n        return this.sortableHandler.getItemAt(this._sortableData, index);\r\n    }\r\n\r\n    indexOf(item: any): number {\r\n        return this.sortableHandler.indexOf(this._sortableData, item);\r\n    }\r\n\r\n    removeItemAt(index: number): void {\r\n        this.sortableHandler.removeItemAt(this._sortableData, index);\r\n    }\r\n\r\n    insertItemAt(item: any, index: number) {\r\n        this.sortableHandler.insertItemAt(this._sortableData, item, index);\r\n    }\r\n}\r\n\r\nclass SortableArrayHandler {\r\n    getItemAt(sortableData: any, index: number): any {\r\n        return sortableData[index];\r\n    }\r\n\r\n    indexOf(sortableData: any, item: any): number {\r\n        return sortableData.indexOf(item);\r\n    }\r\n\r\n    removeItemAt(sortableData: any, index: number) {\r\n        sortableData.splice(index, 1);\r\n    }\r\n\r\n    insertItemAt(sortableData: any, item: any, index: number) {\r\n        sortableData.splice(index, 0, item);\r\n    }\r\n}\r\n\r\nclass SortableFormArrayHandler {\r\n    getItemAt(sortableData: any, index: number): any {\r\n        return sortableData.at(index);\r\n    }\r\n\r\n    indexOf(sortableData: any, item: any): number {\r\n        return sortableData.controls.indexOf(item);\r\n    }\r\n\r\n    removeItemAt(sortableData: any, index: number) {\r\n        sortableData.removeAt(index);\r\n    }\r\n\r\n    insertItemAt(sortableData: any, item: any, index: number) {\r\n        sortableData.insert(index, item);\r\n    }\r\n}\r\n\r\n@Directive({ selector: '[dnd-sortable]' })\r\nexport class SortableComponent extends AbstractComponent {\r\n\r\n    @Input('sortableIndex') index: number;\r\n\r\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\r\n        this.dragEnabled = !!value;\r\n    }\r\n\r\n    @Input(\"dropEnabled\") set droppable(value:boolean) {\r\n        this.dropEnabled = !!value;\r\n    }\r\n\r\n    /**\r\n     * The data that has to be dragged. It can be any JS object\r\n     */\r\n    @Input() dragData: any;\r\n\r\n    /**\r\n     * Drag allowed effect\r\n     */\r\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\r\n        this.effectAllowed = value;\r\n    }\r\n\r\n    /**\r\n     * Drag effect cursor\r\n     */\r\n    @Input(\"effectCursor\") set effectcursor(value: string) {\r\n        this.effectCursor = value;\r\n    }\r\n\r\n    /**\r\n     * Callback function called when the drag action ends with a valid drop action.\r\n     * It is activated after the on-drop-success callback\r\n     */\r\n    @Output(\"onDragSuccess\") onDragSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output(\"onDragStart\") onDragStartCallback: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output(\"onDragOver\") onDragOverCallback: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output(\"onDragEnd\") onDragEndCallback: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output(\"onDropSuccess\") onDropSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\r\n        private _sortableContainer: SortableContainer,\r\n        private _sortableDataService: DragDropSortableService,\r\n        cdr:ChangeDetectorRef) {\r\n        super(elemRef, dragDropService, config, cdr);\r\n        this.dropZones = this._sortableContainer.dropZones;\r\n        this.dragEnabled = true;\r\n        this.dropEnabled = true;\r\n    }\r\n\r\n    _onDragStartCallback(event: Event) {\r\n        // console.log('_onDragStartCallback. dragging elem with index ' + this.index);\r\n        this._sortableDataService.isDragged = true;\r\n        this._sortableDataService.sortableContainer = this._sortableContainer;\r\n        this._sortableDataService.index = this.index;\r\n        this._sortableDataService.markSortable(this._elem);\r\n        // Add dragData\r\n        this._dragDropService.isDragged = true;\r\n        this._dragDropService.dragData = this.dragData;\r\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\r\n        //\r\n        this.onDragStartCallback.emit(this._dragDropService.dragData);\r\n    }\r\n\r\n    _onDragOverCallback(event: Event) {\r\n        if (this._sortableDataService.isDragged && this._elem !== this._sortableDataService.elem) {\r\n            // console.log('_onDragOverCallback. dragging elem with index ' + this.index);\r\n            this._sortableDataService.sortableContainer = this._sortableContainer;\r\n            this._sortableDataService.index = this.index;\r\n            this._sortableDataService.markSortable(this._elem);\r\n            this.onDragOverCallback.emit(this._dragDropService.dragData);\r\n        }\r\n    }\r\n\r\n    _onDragEndCallback(event: Event) {\r\n        // console.log('_onDragEndCallback. end dragging elem with index ' + this.index);\r\n        this._sortableDataService.isDragged = false;\r\n        this._sortableDataService.sortableContainer = null;\r\n        this._sortableDataService.index = null;\r\n        this._sortableDataService.markSortable(null);\r\n        // Add dragGata\r\n        this._dragDropService.isDragged = false;\r\n        this._dragDropService.dragData = null;\r\n        this._dragDropService.onDragSuccessCallback = null;\r\n        //\r\n        this.onDragEndCallback.emit(this._dragDropService.dragData);\r\n    }\r\n\r\n    _onDragEnterCallback(event: Event) {\r\n        if (this._sortableDataService.isDragged) {\r\n            this._sortableDataService.markSortable(this._elem);\r\n            if ((this.index !== this._sortableDataService.index) ||\r\n                (this._sortableDataService.sortableContainer.sortableData !== this._sortableContainer.sortableData)) {\r\n                // console.log('Component._onDragEnterCallback. drag node [' + this.index + '] over node [' + this._sortableDataService.index + ']');\r\n                // Get item\r\n                let item:any = this._sortableDataService.sortableContainer.getItemAt(this._sortableDataService.index);\r\n                // Remove item from previouse list\r\n                this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\r\n                if (this._sortableDataService.sortableContainer.sortableData.length === 0) {\r\n                    this._sortableDataService.sortableContainer.dropEnabled = true;\r\n                }\r\n                // Add item to new list\r\n                this._sortableContainer.insertItemAt(item, this.index);\r\n                if (this._sortableContainer.dropEnabled) {\r\n                    this._sortableContainer.dropEnabled = false;\r\n                }\r\n                this._sortableDataService.sortableContainer = this._sortableContainer;\r\n                this._sortableDataService.index = this.index;\r\n                this.detectChanges();\r\n            }\r\n        }\r\n    }\r\n\r\n    _onDropCallback (event: Event) {\r\n        if (this._sortableDataService.isDragged) {\r\n            // console.log('onDropCallback.onDropSuccessCallback.dragData', this._dragDropService.dragData);\r\n            this.onDropSuccessCallback.emit(this._dragDropService.dragData);\r\n            if (this._dragDropService.onDragSuccessCallback) {\r\n                // console.log('onDropCallback.onDragSuccessCallback.dragData', this._dragDropService.dragData);\r\n                this._dragDropService.onDragSuccessCallback.emit(this._dragDropService.dragData);\r\n            }\r\n            // Refresh changes in properties of container component\r\n            this._sortableContainer.detectChanges();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({ selector: '[dnd-sortable-handle]' })\r\nexport class SortableHandleComponent extends AbstractHandleComponent {\r\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, _Component: SortableComponent,\r\n        cdr:ChangeDetectorRef) {\r\n\r\n        super(elemRef, dragDropService, config, _Component, cdr);\r\n    }\r\n}\r\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\r\n// This project is licensed under the terms of the MIT license.\r\n// https://github.com/akserg/ng2-dnd\r\n\r\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\r\n\r\nimport {DragDropConfig} from './dnd.config';\r\nimport {DragDropService, DragDropSortableService, dragDropServiceFactory, dragDropSortableServiceFactory} from './dnd.service';\r\nimport {DraggableComponent, DraggableHandleComponent} from './draggable.component';\r\nimport {DroppableComponent} from './droppable.component';\r\nimport {SortableContainer, SortableComponent, SortableHandleComponent} from './sortable.component';\r\n\r\nexport * from './abstract.component';\r\nexport * from './dnd.config';\r\nexport * from './dnd.service';\r\nexport * from './draggable.component';\r\nexport * from './droppable.component';\r\nexport * from './sortable.component';\r\n\r\nexport let providers = [\r\n    DragDropConfig,\r\n    { provide: DragDropService, useFactory: dragDropServiceFactory },\r\n    { provide: DragDropSortableService, useFactory: dragDropSortableServiceFactory, deps: [DragDropConfig] }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\r\n  exports : [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\r\n\r\n})\r\nexport class DndModule {\r\n  static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: DndModule,\r\n            providers: providers\r\n        };\r\n    }\r\n}\r\n"]}